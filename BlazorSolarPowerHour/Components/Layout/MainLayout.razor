@using BlazorSolarPowerHour.Services
@inherits LayoutComponentBase

<TelerikRootComponent>
    <div class="k-body">
        <TelerikAppBar PositionMode="AppBarPositionMode.Sticky"
                       ThemeColor="@ThemeConstants.AppBar.ThemeColor.Dark"
                       Class="machine-manufacturing-appbar">
            <AppBarSection Class="k-flex-basis-0 k-flex-grow k-gap-x-xs-6 k-gap-x-lg-20">
                <a href="#" class="k-d-flex k-gap-1.5">
                    <img src="@LogoSrc" alt="Logo" />
                    <img src="@LogoTextSrc" alt="Logo Text" class="k-d-xs-none k-d-lg-inline" />
                </a>
                <TelerikButton OnClick="@ToggleDrawer" FillMode="@ThemeConstants.Button.FillMode.Flat" Icon="SvgIcon.Menu" Title="Menu"></TelerikButton>
            </AppBarSection>
            
            <AppBarSection Class="k-flex-basis-0 k-flex-grow k-justify-content-center">
                <TelerikTextBox Placeholder="Input Value" ShowPrefixSeparator="false" Class="machine-manufacturing-textbox k-d-xs-none k-d-lg-flex">
                    <TextBoxPrefixTemplate>
                        <TelerikSvgIcon Icon="@SvgIcon.Search" />
                    </TextBoxPrefixTemplate>
                </TelerikTextBox>
                <TelerikButton Title="Search" Class="k-d-xs-inline-flex k-d-lg-none" FillMode="@ThemeConstants.Button.FillMode.Flat" ThemeColor="@ThemeConstants.Button.ThemeColor.Secondary" Icon="SvgIcon.Search"></TelerikButton>
            </AppBarSection>

            @* <AppBarSection Class="k-flex-basis-0 k-flex-grow k-justify-content-end k-gap-1.5">
                <text>Status</text>
                @if (IsServiceSubscribedToTopics)
                {
                    <TelerikSvgIcon Icon="@SvgIcon.CheckCircle" ThemeColor="@ThemeConstants.FontIcon.ThemeColor.Success"/>
                }
                else
                {
                    <TelerikSvgIcon Icon="@SvgIcon.CancelCircle" ThemeColor="@ThemeConstants.FontIcon.ThemeColor.Error"/>
                }
            </AppBarSection> *@

            <AppBarSection Class="k-flex-basis-0 k-flex-grow k-justify-content-end k-gap-1.5">
                <div class="k-badge-container">
                    @* <TelerikButton Title="Notifications" FillMode="@ThemeConstants.Button.FillMode.Flat" Icon="@SvgIcon.Bell"></TelerikButton>

                    <TelerikBadge Rounded="@ThemeConstants.Badge.Rounded.Full"
                                  Position="@BadgePosition.Inside"
                                  HorizontalAlign="@BadgeHorizontalAlign.End"
                                  VerticalAlign="@BadgeVerticalAlign.Top"
                                  ThemeColor="@ThemeConstants.Badge.ThemeColor.Primary">
                    </TelerikBadge> *@
                    
                    @if (IsServiceSubscribedToTopics)
                    {
                        <TelerikButton Title="MQTT Connection" FillMode="@ThemeConstants.Button.FillMode.Flat" Icon="@SvgIcon.CheckCircle" ThemeColor="@ThemeConstants.FontIcon.ThemeColor.Success"></TelerikButton>
                    }
                    else
                    {
                        <TelerikButton Title="MQTT Connection" FillMode="@ThemeConstants.Button.FillMode.Flat" Icon="@SvgIcon.CancelCircle" ThemeColor="@ThemeConstants.FontIcon.ThemeColor.Error"></TelerikButton>
                    }

                </div>
                <span class="k-appbar-separator k-border-border"></span>
                <TelerikDropDownButton Icon="@SvgIcon.User" ShowArrowButton="false" FillMode="@ThemeConstants.Button.FillMode.Flat">
                    <DropDownButtonContent>
                        Hi, admin!
                    </DropDownButtonContent>
                </TelerikDropDownButton>
            </AppBarSection>
        </TelerikAppBar>

        <TelerikDrawer Data="@DrawerItems"
                       Mode="@DrawerMode.Push"
                       MiniMode="true"
                       @ref="@DrawerRef"
                       @bind-Expanded="@DrawerExpanded"
                       @bind-SelectedItem="@SelectedDrawerItem"
                       Class="machine-manufacturing-drawer"
                       Width="248px">
            <DrawerContent>
                <div class="k-m-4">
                    @Body
                </div>
            </DrawerContent>
        </TelerikDrawer>
    </div>

</TelerikRootComponent> 

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Inject]
    public MqttService LiveService { get; set; } = default!;

    private bool IsServiceSubscribedToTopics { get; set; }

    private readonly string LogoSrc = "/dashboard/machine-manufacturing/logo.svg";
    private readonly string LogoTextSrc = "/dashboard/machine-manufacturing/logo_text.svg";
    private async Task ToggleDrawer() => await DrawerRef.ToggleAsync();
    private bool DrawerExpanded { get; set; } = true;

    private DrawerItem? _selectedDrawerItem;
    private DrawerItem SelectedDrawerItem
    {
        get => _selectedDrawerItem ?? DrawerItems.FirstOrDefault(new DrawerItem());
        set => _selectedDrawerItem = value;
    }

    TelerikDrawer<DrawerItem> DrawerRef { get; set; } = default!; // set by Blazor on init

    IEnumerable<DrawerItem> DrawerItems { get; set; } =
        new List<DrawerItem>
                                {
            new DrawerItem { Text = "Home", Icon = SvgIcon.Home, Url = "/" },
                // new DrawerItem { Text = "Counter", Icon = SvgIcon.Plus, Url = "/counter" },
                // new DrawerItem { Text = "Weather", Icon = SvgIcon.GridLayout, Url = "/weather" },
                                };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsServiceSubscribedToTopics = LiveService.IsSubscribedToTopic;
            LiveService.SubscriptionChanged += OnLiveServiceOnSubscriptionChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnLiveServiceOnSubscriptionChanged(bool isSubscribed)
    {
        IsServiceSubscribedToTopics = isSubscribed;
        StateHasChanged();
    }

    public class DrawerItem
    {
        public string Text { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
        public ISvgIcon? Icon { get; set; }
    }
}